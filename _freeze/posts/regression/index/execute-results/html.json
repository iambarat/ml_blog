{
  "hash": "8630c85c64b130a676c17842b4ad551f",
  "result": {
    "markdown": "---\ntitle: \"Exploring Linear and Non-Linear Regression in Python\"\nauthor: \"Mohaimin\"\ndate: \"`r Sys.Date()`\"\nformat: html\n---\n\n# Introduction\n\nIn the world of data science, regression analysis is a powerful tool for understanding relationships between variables. In this blog post, we'll explore two fundamental types: linear and non-linear regression. We'll use Python, a versatile programming language popular in data science, to demonstrate these concepts.\n\n## Setting Up the Environment\n\nBefore diving into the regression analysis, ensure you have Python and necessary libraries installed. We'll use `scikit-learn`, a widely used machine learning library in Python. You can install it via pip:\n\n\n```{bash}\npip install scikit-learn\n```\n\n\n### Linear Regression\n\nLinear regression is a method to model the relationship between a dependent variable and one or more independent variables. It assumes a linear relationship between the input (independent variables) and the output (dependent variable).\n\n### Example in Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = np.array([5, 15, 25, 35, 45, 55]).reshape((-1, 1))\ny = np.array([5, 20, 14, 32, 22, 38])\n\n# Create a linear regression model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Make predictions\nx_pred = np.array([65, 75]).reshape((-1, 1))\ny_pred = model.predict(x_pred)\n\n# Plotting\nplt.scatter(x, y, color='blue')\nplt.plot(x_pred, y_pred, color='red')\nplt.title('Linear Regression Example')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=585 height=449}\n:::\n:::\n\n\n### Non-linear Regression\n\nIn contrast to linear regression, non-linear regression is used when the data shows a non-linear relationship. This means the change in the output is not proportional to the change in the input.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# Transforming the data to include non-linear elements\npolynomial_features = PolynomialFeatures(degree=2)\nx_poly = polynomial_features.fit_transform(x)\n\n# Creating a linear regression model to fit the polynomial features\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\n\n# Make predictions with non-linear model\nx_poly_pred = polynomial_features.fit_transform(x_pred)\ny_poly_pred = model.predict(x_poly_pred)\n\n# Plotting\nplt.scatter(x, y, color='blue')\nplt.plot(x_pred, y_poly_pred, color='red')\nplt.title('Non-Linear Regression Example')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=585 height=449}\n:::\n:::\n\n\n### Colcusion\n\nIn this post, we've seen how to implement both linear and non-linear regression models in Python. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}