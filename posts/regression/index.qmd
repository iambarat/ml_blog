---
title: "Exploring Linear and Non-Linear Regression"
author: "Mohaimin"
date: "2023-12-02"
format: html
categories: [regression]
---


# Introduction

Regression analysis is a powerful statistical method used for modeling the relationship between a dependent variable and one or more independent variables. In this blog post, we will explore two primary types of regression: linear and non-linear, using Python within the RStudio environment.

## Linear Regression

Linear regression is the most straightforward approach in regression analysis. It assumes a linear relationship between the input variables (independent) and the single output variable (dependent).

### The Mathematical Model

The linear regression model can be represented by:

$$ y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + ... + \beta_n x_n + \epsilon $$

where $\beta_0, \beta_1, ..., \beta_n$ are coefficients, and $\epsilon$ is the error term.

### Python Example: Simple Linear Regression

Let's start with a simple example of linear regression with one independent variable.

```{python}
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample data
X = np.array([[5], [15], [25], [35], [45], [55]])
y = np.array([5, 20, 14, 32, 22, 38])

# Creating the linear regression model
model = LinearRegression()
model.fit(X, y)

# Predictions
X_new = np.array([[65]])
y_pred = model.predict(X_new)

# Plotting
plt.scatter(X, y, color='blue')
plt.plot(X, model.predict(X), color='red')
plt.scatter(X_new, y_pred, color='green')
plt.title('Simple Linear Regression')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
```

## Non Linear Regression

In contrast, non-linear regression is used when the data shows a more complex relationship that cannot be accurately described by a linear model.
Non-linear regression can take many forms, one of which is the polynomial regression, represented by:
$$ y = \beta_0 + \beta_1 x^1 + \beta_2 x^2 + ... + \beta_n x^n + \epsilon $$

Below is an example of non linear regression using polynomial model. 

```{python}
from sklearn.preprocessing import PolynomialFeatures

# Transforming the data
polynomial_features = PolynomialFeatures(degree=2)
X_poly = polynomial_features.fit_transform(X)

# Creating a linear regression model
model = LinearRegression()
model.fit(X_poly, y)

# Predictions
X_new_poly = polynomial_features.fit_transform(X_new)
y_poly_pred = model.predict(X_new_poly)

# Plotting
plt.scatter(X, y, color='blue')
plt.plot(X, model.predict(X_poly), color='red')
plt.scatter(X_new, y_poly_pred, color='green')
plt.title('Polynomial Regression')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
```

## Conclusion

Understanding the difference between linear and non-linear regression is crucial for accurately modeling data in various fields. Python provides a versatile and approachable platform for implementing and visualizing both types of regression, making it an excellent choice for data scientists and statisticians.