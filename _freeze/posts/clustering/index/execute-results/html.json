{
  "hash": "12865da27b5268b038e9f2365cfb05ec",
  "result": {
    "markdown": "---\ntitle: \"Understanding Clustering in Machine Learning\"\nauthor: \"Your Name\"\ndate: \"2023-12-02\"\nformat: html\ncategories: [code]\n---\n\n# Introduction\n\nClustering is a fundamental technique in machine learning, often used in data analysis for pattern recognition and grouping similar data points. In this blog post, we'll explore the basics of clustering, delve into some common algorithms, and provide Python examples to illustrate these concepts in practice.\n\n## What is Clustering?\n\nClustering is an unsupervised learning technique used to group a set of objects in such a way that objects in the same group (a cluster) are more similar to each other than to those in other groups.\n\n### Key Concepts\n\n- **Cluster**: A collection of data points aggregated together because of certain similarities.\n- **Centroid**: The central point of a cluster. Not all clustering algorithms use centroids.\n\n## Common Clustering Algorithms\n\n1. **K-Means Clustering**: Groups data into \\(k\\) number of clusters.\n2. **Hierarchical Clustering**: Builds a hierarchy of clusters using a tree-like structure.\n\n## K-Means Clustering\n\n### The Mathematical Model\n\nThe goal of K-means is to minimize the within-cluster variance, defined as:\n\n$$ W(C_k) = \\sum_{x_i \\in C_k} ||x_i - \\mu_k||^2 $$\n\nwhere $C_k$ is the \\(k\\)th cluster, $x_i$ is a data point, and $\\mu_k$ is the centroid of $C_k$.\n\n### Python Example: Implementing K-Means using Iris dataset\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Load the iris dataset\niris = datasets.load_iris()\nX_iris = iris.data[:, :2]  # We only take the first two features for simplicity\n\n# KMeans clustering\nkmeans_iris = KMeans(n_clusters=2, random_state=0).fit(X_iris)\n\n# Plotting the clusters\nplt.scatter(X_iris[:, 0], X_iris[:, 1], c=kmeans_iris.labels_, cmap='rainbow')\nplt.title('K-Means Clustering on Iris Dataset')\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-2.png){width=589 height=449}\n:::\n:::\n\n\nThe resulting plot shows how K-Means algorithm clusters the iris flowers based on sepal length and width. You can experiment with different numbers of clusters 'n_clusters' and features to see how the clustering changes.\n\n## Conclusion\n\nClustering offers a way to uncover hidden patterns in data, making it a crucial tool in the machine learning toolkit. Python, with its rich ecosystem of libraries, provides an accessible platform for exploring these techniques.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}